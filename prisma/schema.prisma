// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String  @unique
  password String

  bio String?
  email String?

  avatar String?

  spots Spot[]
  spotConnects SpotConnect[]

  spotMarkers SpotMarker[]
  spotMarkerConnects SpotMarkerConnect[]

}

model Spot {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  text String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  category   SpotCategory @relation(fields: [categoryId], references: [id])
  categoryId Int


  spotMarkers SpotMarker[]
  spotConnects SpotConnect[]

  @@index([userId])
  

}



model SpotCategory {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  spots      Spot[]

  @@map("spot_category")
}


model SpotConnect {
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  spot Spot @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId Int

    @@id(name: "id", [spotId, userId])
}


model SpotMarker{
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  spot Spot @relation(fields: [spotId], references: [id], onDelete: Cascade)
  spotId Int

  spotMarkerConnects SpotMarkerConnect[]

  @@index([userId])
  @@index([spotId])

}

model SpotMarkerConnect {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  spotMarker SpotMarker @relation(fields: [spotMarkerId], references: [id], onDelete: Cascade)
  spotMarkerId Int


  @@index([userId])
  @@index([spotMarkerId])

}